% this script simulate the process happen in C#
% i.e., 
% should run Execute.m first, just to get feature_min,scalingFactors.
% other parameters like SV_matlab, param,gamma,rho can be extracted from
% model file (.txt), but feature_min,scalingFactors is not stored anywhere.
% wait... I think I can store them in another .mat file with the same index
% as the .txt model file

% function cutClassificationResults = CutAndTestFile(fileName)

SetEnvironment
SetPath

%% INPUT:
nFeature = 12;  % Mike: this determines how many dimensions of FFTs are run for each file...
modelIndex = 229; % Mike: modelIndex is the variable 'OutIndex' in Execute.m

% figure out possible model names based on modelIndex
str_fftsource = strcat('_',getenv('USERNAME'),'_eMote');
old_fname_modelparameter = [g_str_pathbase_radar,'\IIITDemo\Models\ModelParameters\ModelParameter',num2str(modelIndex)];
new_fname_modelparameter = [g_str_pathbase_radar,'\IIITDemo\Models\ModelParameters\ModelParameter',str_fftsource,num2str(modelIndex)];
override_fname_modelparameter = [g_str_pathbase_radar,'\IIITDemo\Models\ModelParameters\ModelParameter',num2str(modelIndex)];

fname_modelparameter = new_fname_modelparameter;

if exist(fname_modelparameter,'file') == 0
    fprintf('##############################################################\n');
    if exist(old_fname_modelparameter,'file') == 2
        fname_modelparameter = old_fname_modelparameter;
        fprintf('WARNING! found old-style model parameter name to use because desired is missing\n');
        fprintf('         old:     %s\n',old_fname_modelparameter);
        fprintf('         desired: %s\n',new_fname_modelparameter);
    elseif exist(override_fname_modelparameter,'file') == 2
        fname_modelparameter = override_fname_modelparameter;
        fprintf('WARNING! overriding model parameter name to use because desired is missing\n');
        fprintf('         override: %s\n',override_fname_modelparameter);
        fprintf('         desired: %s\n',new_fname_modelparameter);
    else
        fprintf('ERROR! file %s does not exist!\n',fname_modelparameter);
        fprintf('       ... check variable modelIndex matches an OutIndex generated by Execute.m\n');
        fprintf('       ... check whether you are trying to use an old or new style name\n');
    end
    fprintf('##############################################################\n');
end

path_data=strcat(g_str_pathbase_data,'raw\20150224-arc\prb'); % Jin's laptop: 'C:\Users\he\My Research\2015.1\20150224-arc\prb';
fileName='human_walk_from_0degree_prb';
path_data=strcat(g_str_pathbase_data,'raw\20150402-bv'); % Jin's laptop: 'C:\Users\he\My Research\2015.1\20150402-bv';
fileName='cartest_48';
% path_data='C:\Users\he\My Research\2015.1\20150204-arc';
% fileName='1';
% path_data='C:\Users\he\My Research\2015.1\20150310-arc';
% fileName='balltest5';
path_data=strcat(g_str_pathbase_data,'raw\20150311-prb'); % Jin's laptop: 'C:\Users\he\My Research\2015.1\20150311-prb';
fileName='balltest_1';
% path_data='C:\Users\he\My Research\2015.1\20150404-ceiling';
% fileName='balltest_ceiling_8';

% path_data='C:\Users\he\My Research\2015.1\20150525-parkinglot';
% fileName='walktest1';

% path_data='C:\Users\he\Documents\Dropbox\MyC#Work\emote4jin\Data Collector 1.2\Data Collector Host 1.2\Data Collector Host\bin\Debug';

path_data=strcat(g_str_pathbase_data,'raw\20150713-parkinglot'); % Jin's laptop: 'C:\Users\he\My Research\2015.1\20150713-parkinglot';
fileName='walktest_2m';%


%% Compute
cd(path_data);
[I,Q,N]=Data2IQ(ReadBin([fileName,'.data']));



thr_cumPhaseChange = 3.6e5;%3.6e5  %//5e5; // 3 seconds (12steps), go 1m, which is 0.33 m/s
thr_phaseChangeInOneStep_start = 1.5e5; %1.5e5;  %// 1/4s, change 1/12 m, which is 0.33 m/s
thr_phaseChangeInOneStep_stop = 1.0e5;
nStepToStart = 4; %12
nStepToStop = 8; %8

Step=64;
nStep = floor(N/Step);

dcBiasI = median(I);
dcBiasQ = median(Q); % ????paper???????????????????????????????
% warning('using static DC Bias');
% dcBiasI = 2044;   % enable when do test on dummy data
% dcBiasQ = 2048;
Data = (I-dcBiasI) + 1i*(Q-dcBiasQ);

bits = 12;

Range = UnWrap(angle(Data)/2/pi, -0.5, 0.5)* 2*pi*(2^bits);

validFlag=0;
nStepInStateOne = 0;
cumPhaseChange = 0;
phaseChangeInOneStep = 0;

start=[];
stop=[];
stopWindowIndex=0;


for j=1:nStep
    %phaseChangeInOneStep = Range(j*Step) - Range((j-1)*Step+1);
    if j==1
        phaseChangeInOneStep = Range(j*Step);
    else
        phaseChangeInOneStep = Range(j*Step) - Range((j-1)*Step);
    end
%     j
%     phaseChangeInOneStep

    if validFlag==0
        if abs(phaseChangeInOneStep)> thr_phaseChangeInOneStep_start
            validFlag = 1;
%             j
%             'validFlag 0->1'
            potentialStart = (j-1)*Step+1;
        else
            continue;
        end
    end
    if validFlag==1
        cumPhaseChange = cumPhaseChange + phaseChangeInOneStep;
        nStepInStateOne = nStepInStateOne + 1;
        if nStepInStateOne == nStepToStart
            if abs(cumPhaseChange) > thr_cumPhaseChange
                validFlag = 2;               
%                 j
%                 'validFlag 1->2'
                stopWindowIndex = 0;  
                start = [start,potentialStart];
            else
                validFlag = 0;
%                 j
%                 'validFlag 1->0'
            end
            nStepInStateOne = 0;
            cumPhaseChange = 0;
        end
    end
    if validFlag == 2
%         abs(phaseChangeInOneStep)
        if abs(phaseChangeInOneStep) < thr_phaseChangeInOneStep_stop
            stopWindowIndex = stopWindowIndex+1;
        else
            stopWindowIndex = 0;
        end
        if stopWindowIndex == nStepToStop %12 step is 3 seconds. In 3 seconds there are no movement
            validFlag = 0;
%             j
%             'validFlag 2->0'
            stop=[stop,j*Step];
        end
    end
end

for j=1:length(stop)
%     j
%     [start(j)/64,stop(j)/64]
end


load(fname_modelparameter);  %from top of script
cutClassificationResults = zeros(1,length(start));
decision = zeros(1,length(start));
for j=1:length(start)
    if (length(stop)==length(start)-1) 
        stop=[stop, nStep*Step];
    end
    I_cut = I(start(j):stop(j));
    Q_cut = Q(start(j):stop(j));
    
    Data_cut = zeros(1,2*(stop(j)-start(j)+1));
    Data_cut(1:2:length(Data_cut)-1) = I_cut;
    Data_cut(2:2:length(Data_cut)) = Q_cut;
    WriteBin(['.\cutt\',fileName,'_cut',num2str(j),'.data'],Data_cut); % use another folder cutt to avoid changing files in cut folder
    
    j
    f_file = File2Feature(['.\cutt\',fileName,'_cut',num2str(j)], 'Human', 1, 0, feature_min, scalingFactors);
    f_file = f_file(1:length(f_file)-1);
    f_file = cell2mat(f_file);
    
%     f_file = [3541.000000000,217.000000000,175.000000000,3048.949707008,128.000000000,3150.000000000,199.000000000,152.000000000,3265.934814464,127.000000000];
%     f_file = (f_file-feature_min).*scalingFactors

    [cutClassificationResults(j),decision(j)]= testFeaturevector(f_file,SV_matlab,param,gamma,rho);
    decision(j)
end

cutClassificationResults
decision

% to copy to c# for dummy tests (WriteDataToNoR.cs)
% find the content of I and Q in C:\Users\he\Documents\Dropbox\MyMatlabWork\radar\IIITDemo\Records\tmp.txt
GenerateArrInCsharp(I,0);
pause;
GenerateArrInCsharp(Q,0);

